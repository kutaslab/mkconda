# # mkconda requires a current GIT_TOKEN on TravisCI kutaslab/mkconda
# env:
#     - PACKAGE_NAME: mkconda   # for the conda_upload.sh deploy script
#     # - CROOT: /tmp/mkconda/conda-bld
# language: minimal
# before_install:
#     - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
#     - bash miniconda.sh -b -p $HOME/miniconda
#     - source $HOME/miniconda/etc/profile.d/conda.sh && conda activate
#     - hash -r
#     - conda config --set always_yes yes --set changeps1 no
#     - conda info -a
# install:
#     - conda install -q conda-build conda-verify
#     - conda clean --all
#     - mkdir -p /tmp/mkconda/conda-bld
#     - cp -r ./conda/conda-bld/* /tmp/mkconda/conda-bld
#     # - conda build conda -c kutaslab -c defaults -c conda-forge
#     # - conda create --name mkconda_env mkconda -c local -c kutaslab -c defaults -c conda-forge
#     # build env from recipe file snapshot 
#     - conda create --name run_env --file ./conda/mkconda_env_recipe.txt
#     - conda activate run_env
#     - conda list
#     - lscpu
#     - python -c 'import numpy; numpy.show_config()'
#     - python -c 'import matplotlib; print(matplotlib.__version__)'
#     - python -c 'import mkpy; print(mkpy.__version__)'
#     - python -c 'import fitgrid; print(fitgrid.__version__)'
# after_success:
#     - git clone https://github.com/kutaslab/mkpy pkgs/mkpy
#     - cd pkgs/mkpy
#     - pytest
#     - cd ../..

#     - git clone https://github.com/kutaslab/spudtr pkgs/spudtr
#     - cd pkgs/spudtr
#     - pytest
#     - cd ../..

#     - git clone https://github.com/kutaslab/fitgrid pkgs/fitgrid
#     - cd pkgs/fitgrid
#     - pytest
#     - cd ../..
#     - pwd
#     - ls -l

#     - conda deactivate   # fall back to build env
# before_deploy:
#     - conda install anaconda-client
#     - conda list
# deploy:
#     - provider: script
#       skip_cleanup: true
#       script: bash ./ci/conda_upload.sh
#       on:
#           all_branches: true


# Continous integration and deployment (CID) workflow
#
# T. Urbach 07/2021
# 
# - canonical package semantic version strings are M.N.P and M.N.P.devX
#
# CI:
#
#   - conda build, install, and pytest the conda packages linux-64 py3[678]
#   - conda convert py3[678] x [osx-64, win-64] (untested)
#   - build sphinx docs
#   - build python package sdist
#
# Deployment:
#
#   Development: package version M.N.P.devX on dev branch triggers
#     - anaconda upload py3X x OS-64 tarballs to channel label /pre-release
#     - twine python build/sdist to test.pypi.org
#
#   Stable release: version M.N.P on release tagged vM.N.P triggers
#     - anaconda upload py3X x OS-64 tarballs to channel label /main
#     - codecov
#     - sphinx docs to gh-pages
#     - twine python build/sdist to pypi.org
#
# Notes:
#
# Conda env wrangling. To run conda activate in bash shells, the conda
#   shell.bash hook must be sourced. The usual "conda init bash"
#   installs the hook in .bashrc which isn't consulted (or exits
#   early) for the Actions non-interactive shells. One option is to
#   re-install the hook each time it is needed in a run step like so:
#
#     - eval "$(conda shell.bash hook)"
#     - conda activate myenv
#
#   The approach here is to install the hook in .profile_bash one time
#   in the conda setup and run bash as a non-interactive login shell.
#
# Github releases. Github published releases generate a release and a
#   push event. Pushed stable release tags are ignored to prevent
#   double workflow runs.

name: mkconda-cid
on:
  push:
    branches: ['*']
    tags-ignore:
      - v[0-9]+.[0-9]+.[0-9]+  # prevent double runs for vM.N.P releases
  pull_request:
  release:
    types: [published]

  schedule:
    # min hour day month year. digit = when, / = step by, * = all
    - cron: '0 0 */1 * *'

env:
  PACKAGE_NAME: mkconda
  CONDA_BLD_PATH: /tmp/ci_conda_bld
  # only this job deploys codecov, docs, sdist  
defaults:
  run:
    # login shell to source the conda hook in .bash_profile
    shell:
      bash -l {0}

jobs:
  conda-ci:
    runs-on: ubuntu-latest
    outputs:
      conda-tarball: ${{ steps.conda-bld.outputs.conda-tarball }}
    steps:

      # ------------------------------------------------------------
      # 1. Install
      - uses: actions/checkout@v2  # fetch the current commit, verified action
      - name: conda setup
        run: |
          # short SHA gets baked into the conda package filename in conda/meta.yaml
          echo "GIT_ABBREV_COMMIT=_g${GITHUB_SHA:0:8}" >> $GITHUB_ENV
          miniconda_url='https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh';

          
          wget $miniconda_url -O $HOME/miniconda.sh
          bash ~/miniconda.sh -b -p $HOME/miniconda
          hash -r
          $HOME/miniconda/bin/conda shell.bash hook >> ~/.bash_profile  # instead of conda init bash
          source ~/.bash_profile
          hash -r

          # ------------------------------------------------------------
          # conda 
          conda config --set always_yes yes --set changeps1 no
          conda config --set bld_path $CONDA_BLD_PATH

          # switch to mamba/boa and conda-forge. Note revised mamba
          # channel priority semantics, strict in 0.14 is flexible in
          # 0.15
          conda config --add channels conda-forge
          conda config --set channel_priority flexible  # should be default but enforce
          conda install -n base -q conda-build conda-verify anaconda-client mamba boa
          echo "# ------------------------------------------------------------"
          conda info -a
          echo "# ------------------------------------------------------------"
          mamba info -a

      # ------------------------------------------------------------
      # 2. CI
      - name: conda mambabuild ${{ env.PY_VER }}
        id: conda-bld
        run: |
          conda mambabuild --python=$PY_VER -c conda-forge -c defaults -c ejolly -c kutaslab conda
          tarball=$(conda build --python=$PY_VER conda --output)
          echo "::set-output name=conda-tarball::$tarball"

      # black and pytest in the py3X conda env
      - name: >-
          mamba create -n
          env_${{ env.PY_VER }}
          python=${{ env.PY_VER }}
          ${{ env.PACKAGE_NAME}}

        run: |
          mamba create -n mkconda_env $PACKAGE_NAME -c $CONDA_BLD_PATH -c conda-forge -c defaults -c ejolly -c kutaslab
          conda activate mkconda_env
          conda list
          lscpu
          python -c 'import numpy; numpy.show_config()'

      # ------------------------------------------------------------
      # 3. Deploy
      #
      # DEPLOY_TYPE selects conda, python package, and docs uploads
      #
      # Only Linux jobs can deply, macOS are all no_deply
      #
      # for regex matching
      # . canonical version strings are M.N.P.devX and M.N.P
      # . tarballs are $CONDA_BLD_PATH/linux-64/PACKAGE_NAME-.+-py3[678]_g[a-z0-9]{8}.tar.bz2
      # . pkg_version is entire M.N.P.devX version string
      # . pkg_mnp is M.N.P only
      - name: set DEPLOY_TYPE=<pre-release|main|no_deploy>
        run: |

          # lookup the conda tarball package version and M.N.P string (if any)
          tarball=${{ steps.conda-bld.outputs.conda-tarball }}
          pkg_version=`echo $tarball | sed -n "s/.*${PACKAGE_NAME}-\(.\+\)-.*/\1/p"`
          pkg_mnp=`echo $pkg_version | sed -n "s/\(\([0-9]\+\.\)\{1,2\}[0-9]\+\).*/\1/p"`

          # pre-release if package version is M.N.P.devX on dev branch
          if [[ \
            $GITHUB_REF =~ ^refs/heads/dev$ && \
            $pkg_version =~ ^([0-9]+\.){2}[0-9]+(\.dev[0-9]+){0,1}$ \
          ]]; then \
            deploy_type="pre-release"; \
          fi

          # main if package version is M.N.P on release tag vM.N.P
          if [[ \
            $GITHUB_REF =~ ^refs/tags/v([0-9]+\.){2}[0-9]+$ && \
            $pkg_version == $pkg_mnp \
          ]]; then \
            deploy_type="main"; \
          fi

          # else, default
          deploy_type=${deploy_type:-no_deploy}

          # set top-level env for uploads
          echo "PKG_VERSION=${pkg_version}" >> $GITHUB_ENV
          echo "PKG_MNP=${pkg_mnp}" >> $GITHUB_ENV
          echo "DEPLOY_TYPE=${deploy_type}" >> $GITHUB_ENV

          # logging
          echo $PACKAGE_NAME $deploy_type $tarball $pkg_version $pkg_mnp

      - name: >-
          show ${{ env.PACKAGE_NAME }}
          ${{ env.PKG_VERSION }}
          env_${{ env.PY_VER }}
          deploy_type=${{ env.DEPLOY_TYPE }}

        run: |
          conda activate env_$PY_VER
          printenv | sort
          conda list --explicit

      # pytest Kutas Lab packages
      - name: test spudtr
        run: |
          cd $HOME
          git clone https://github.com/kutaslab/spudtr spudtr
          cd spudtr
          pytest

      # - name: deploy conda package python ${{ matrix.py_ver}} ${{ env.DEPLOY_TYPE }}
      #   if: ${{ env.DEPLOY_TYPE == 'pre-release' || env.DEPLOY_TYPE == 'main' }}
      #   env:
      #     ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
      #   run: >-
      #     anaconda
      #     -t "$ANACONDA_TOKEN"
      #     upload $CONDA_BLD_PATH/**/${PACKAGE_NAME}*.tar.bz2
      #     -l $DEPLOY_TYPE
      #     --skip-existing
