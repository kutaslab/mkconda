# 1. Kutaslab develpers: in the directory containing this meta.yaml file, conda
#    build this file into an installable (meta)package mkconda like
#    so, then upload it to the Anaconda kutaslab channel
#
#        conda build . -c kutaslab -c defaults -c conda-forge
#
#     Notes:
#         * at present channel order matters during the build and
#           user conda install 
#
#         * don't bother with conda metapackage ... works, but no footprints
#
# 2. Users: to conda install the package, create a bare environment
#    with some name and install mkconda (exactly) like so except replace
#    my_env_name with a reasonable name
#
#        conda create --name my_env_name
#        conda activate my_env_name
#        conda install mkconda -c kutaslab -c defaults -c conda-forge 
#
{% set numpy_pin = "1.16.4" %}  # same as fitgrid
{% set mkpy_pin = "0.1.7" %}
{% set fitgrid_pin = "0.4.9" %}

package:
  name: mkconda
  version: "0.0.6"

requirements:
  host:
    - python =3.6
    - mkl  # should be in anaconda by default nowadays
    - blas=1.0  # important, pulls from anaconda w/ MKL, blocks conda-forge openblas
  run:
    - mkpy >={{ mkpy_pin }}
    - fitgrid >={{ fitgrid_pin }}
    - spudtr
    - numpy ={{ numpy_pin }}
    - numpy-base ={{ numpy_pin }}
    - zeromq !=4.2.5  # buggy version in this env
    - r-base  # not mro
    - rpy2 <3.0  # else fitgrid fails on py2ri
    - matplotlib >=3.0
    - tornado
    - jupyter
    - r-irkernel
    - bottleneck
    - libiconv  # rpy2 needs it, not included this env, reason unknown
    - r-tidyverse
    - rstudio
#    - statsmodels
#    - numpy  # these should already be satisfied by mkpy and fitgrid
#    - scipy
#    - pandas 

test:
  imports:
    - mkpy
    - fitgrid
    - numpy
    - scipy
    - matplotlib
    - statsmodels
